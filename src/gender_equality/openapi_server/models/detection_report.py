# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DetectionReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_code=None, gender=None, speaker_id=None):  # noqa: E501
        """DetectionReport - a model defined in OpenAPI

        :param time_code: The time_code of this DetectionReport.  # noqa: E501
        :type time_code: float
        :param gender: The gender of this DetectionReport.  # noqa: E501
        :type gender: str
        :param speaker_id: The speaker_id of this DetectionReport.  # noqa: E501
        :type speaker_id: str
        """
        self.openapi_types = {
            'time_code': float,
            'gender': str,
            'speaker_id': str
        }

        self.attribute_map = {
            'time_code': 'time_code',
            'gender': 'gender',
            'speaker_id': 'speaker_id'
        }

        self._time_code = time_code
        self._gender = gender
        self._speaker_id = speaker_id

    @classmethod
    def from_dict(cls, dikt) -> 'DetectionReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The detection_report of this DetectionReport.  # noqa: E501
        :rtype: DetectionReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_code(self):
        """Gets the time_code of this DetectionReport.


        :return: The time_code of this DetectionReport.
        :rtype: float
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this DetectionReport.


        :param time_code: The time_code of this DetectionReport.
        :type time_code: float
        """
        if time_code is None:
            raise ValueError("Invalid value for `time_code`, must not be `None`")  # noqa: E501

        self._time_code = time_code

    @property
    def gender(self):
        """Gets the gender of this DetectionReport.


        :return: The gender of this DetectionReport.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this DetectionReport.


        :param gender: The gender of this DetectionReport.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def speaker_id(self):
        """Gets the speaker_id of this DetectionReport.


        :return: The speaker_id of this DetectionReport.
        :rtype: str
        """
        return self._speaker_id

    @speaker_id.setter
    def speaker_id(self, speaker_id):
        """Sets the speaker_id of this DetectionReport.


        :param speaker_id: The speaker_id of this DetectionReport.
        :type speaker_id: str
        """
        if speaker_id is None:
            raise ValueError("Invalid value for `speaker_id`, must not be `None`")  # noqa: E501

        self._speaker_id = speaker_id
