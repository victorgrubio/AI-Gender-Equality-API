# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.detection_report import DetectionReport
from openapi_server import util

from openapi_server.models.detection_report import DetectionReport  # noqa: E501

class Detection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report=None):  # noqa: E501
        """Detection - a model defined in OpenAPI

        :param report: The report of this Detection.  # noqa: E501
        :type report: List[DetectionReport]
        """
        self.openapi_types = {
            'report': List[DetectionReport]
        }

        self.attribute_map = {
            'report': 'report'
        }

        self._report = report

    @classmethod
    def from_dict(cls, dikt) -> 'Detection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The detection of this Detection.  # noqa: E501
        :rtype: Detection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report(self):
        """Gets the report of this Detection.


        :return: The report of this Detection.
        :rtype: List[DetectionReport]
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this Detection.


        :param report: The report of this Detection.
        :type report: List[DetectionReport]
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")  # noqa: E501

        self._report = report
